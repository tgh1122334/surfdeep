}
print(table(numevent))
}
create_testset=function(data,initialpts,txtdir,imgdir){
backward=2*30
nrow=dim(data)[1]
ID=initialpts$row
r=NULL
for (j in 1:length(ID)){
test=tail(data,n=nrow-ID[j]+1)
res=scanevent(test)
tempres=data.frame(days=res$day,censortype=res$cens)
write.table(tempres,paste(txtdir,"/imgs",j,".txt",sep = ""),sep = "\t",row.names = F,quote = F)
imgtab=data[(ID[j]-backward+1):ID[j],]
imgtab[,2:5]=imgtab[,2:5]/imgtab[backward,]$Close
imgtab[,2:5]=log10(imgtab[,2:5]) #pct=price/init Close
r1=range(imgtab[,2:5])
r=c(r,r1[1],r1[2]) #log10(pct) to stablize y
write.table(imgtab,paste(imgdir,"/imgs",j,".txt",sep = ""),sep = "\t",row.names = F,quote = F)
}
print(paste0("range of logpct:",min(r),"-",max(r)))
}
library(lubridate)
library(zoo)
library(tseries)
spComp <- read.table("SP500.txt",header = T,sep = "\t")
dateStart <- "2007-04-01"
dateEnd1 <- "2016-11-01"
dateEnd <- "2017-04-01"
symbols <- spComp[, 1]
nAss <- length(symbols)
nAss=10
for (i in 1:nAss) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
cmd=paste("mkdir -p testset_time/testset/ytab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
cmd=paste("mkdir -p testset_time/testset/imgtab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
cmd=paste("mkdir -p testset_time/trainset/ytab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
cmd=paste("mkdir -p testset_time/trainset/imgtab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
if(class(result) == "try-error") {
next
}
else {
tab=data.frame(z)
tab$Date=rownames(tab)
tab=tab[,c(5,1:4)]
tab_sorted <- tab[order(tab$Date),]
tab_sorted$Date= strptime(tab_sorted$Date,format="%Y-%m-%d")
whichend1=which(tab_sorted$Date==dateEnd1)
train_tab=tab_sorted[1:whichend1,]
test_tab=tab_sorted[(whichend1+1-60):(dim(tab)[1]),]
train_init=scaninitial0(train_tab) #scan for # of start times
test_init=scaninitial0(test_tab) #scan for # of start times
if(!is.null(train_init$table)){
dir1=paste("testset_time/trainset/ytab",i,sep = "")
dir2=paste("testset_time/trainset/imgtab",i,sep = "")
create_testset(train_tab,train_init,dir1,dir2)# create testset folder with imgs matching events
print(paste(i,"th stock",sep = " "))
}
if(!is.null(test_init$table)){
dir1=paste("testset_time/testset/ytab",i,sep = "")
dir2=paste("testset_time/testset/imgtab",i,sep = "")
create_testset(test_tab,test_init,dir1,dir2)# create testset folder with imgs matching events
print(paste(i,"th stock test",sep = " "))
}
}
}
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T)
?get.hist.quote
library(zoo)
?getSymbols
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
library(quantmod)
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
i=2
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
install.packages("tseries")
install.packages("tseries")
install.packages("tseries")
install.packages("tseries")
install.packages("tseries")
install.packages("tseries")
library(tseries)
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
library(lubridate)
library(zoo)
library(tseries)
install.packages("lubridate")
install.packages("zoo")
install.packages("tseries")
spComp <- read.table("SP500.txt",header = T,sep = "\t")
dateStart <- "2007-04-01"
dateEnd1 <- "2016-11-01"
dateEnd <- "2017-04-01"
symbols <- spComp[, 1]
nAss=10
symbols
for (i in 1:nAss) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
cmd=paste("mkdir -p testset_time/testset/ytab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
cmd=paste("mkdir -p testset_time/testset/imgtab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
cmd=paste("mkdir -p testset_time/trainset/ytab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
cmd=paste("mkdir -p testset_time/trainset/imgtab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
if(class(result) == "try-error") {
next
}
else {
tab=data.frame(z)
tab$Date=rownames(tab)
tab=tab[,c(5,1:4)]
tab_sorted <- tab[order(tab$Date),]
tab_sorted$Date= strptime(tab_sorted$Date,format="%Y-%m-%d")
whichend1=which(tab_sorted$Date==dateEnd1)
train_tab=tab_sorted[1:whichend1,]
test_tab=tab_sorted[(whichend1+1-60):(dim(tab)[1]),]
train_init=scaninitial0(train_tab) #scan for # of start times
test_init=scaninitial0(test_tab) #scan for # of start times
if(!is.null(train_init$table)){
dir1=paste("testset_time/trainset/ytab",i,sep = "")
dir2=paste("testset_time/trainset/imgtab",i,sep = "")
create_testset(train_tab,train_init,dir1,dir2)# create testset folder with imgs matching events
print(paste(i,"th stock",sep = " "))
}
if(!is.null(test_init$table)){
dir1=paste("testset_time/testset/ytab",i,sep = "")
dir2=paste("testset_time/testset/imgtab",i,sep = "")
create_testset(test_tab,test_init,dir1,dir2)# create testset folder with imgs matching events
print(paste(i,"th stock test",sep = " "))
}
}
}
library(lubridate)
library(zoo)
library(tseries)
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
?get.hist.quote
con <- url("https://finance.yahoo.com")
if(!inherits(try(open(con), silent = TRUE), "try-error")) {
close(con)
x <- get.hist.quote(instrument = "^gspc", start = "1998-01-01",
quote = "Close")
plot(x)
x <- get.hist.quote(instrument = "ibm", quote = c("Cl", "Vol"))
plot(x, main = "International Business Machines Corp")
spc <- get.hist.quote(instrument = "^gspc", start = "1998-01-01",
quote = "Close")
ibm <- get.hist.quote(instrument = "ibm",  start = "1998-01-01",
quote = "Adj")
require("zoo")		# For merge() method.
x <- merge(spc, ibm)
plot(x, main = "IBM vs S&P 500")
}
ymbols[i]
get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T)
get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", quiet = T)
get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d")
get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"))
get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider="yahoo")
get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd)
get.hist.quote(instrument = "AAPL", start = dateStart,
end = dateEnd)
symbols[i]
as.character(symbols[i])
result <- try(z <- get.hist.quote(instrument = as.character(symbols[i]), start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
result
library(lubridate)
library(zoo)
library(tseries)
# consider time points as unit instead of date;
scaninitial0=function(tab1){
n=dim(tab1)[1]
init0times=NULL
temp=NULL
rowID=NULL
slide=5 #5 pts constant increasing
backward=2*30 # look back 60 pts
forward=2*30
if(n>slide+forward){
for(i in (slide+forward-1):(n-backward)){
if(all(diff(tab1[(i-slide+1):i,]$Close) >= 0)){
temp=tab1[i,]
init0times=rbind.data.frame(init0times,temp)
rowID=rbind(rowID,i)
}
}}
return(list(row=rowID,table=init0times))
}
scanevent=function(tab1){
backward=2*30 # look back 60 pts
int0=tab1[1,]$Close
tab1$closepct=tab1$Close/int0
#print(int0)
n=dim(tab1)[1]
#print(n)
eventimes=NULL
temp=NULL
eventnum=NULL
#define event within 60 pts
if(dim(tab1)[1]>=backward){
for(i in 1:backward){
if(tab1[i,]$closepct>=1.1)
{temp=data.frame(Date=tab1[i,]$Date,Close=tab1[i,]$Close,Close_percent=tab1[i,]$closepct,Censor_type=1)
eventnum=c(eventnum,i)
eventimes=rbind.data.frame(eventimes,temp)}
if(tab1[i,]$closepct<=0.9)
{temp=data.frame(Date=tab1[i,]$Date,Close=tab1[i,]$Close,Close_percent=tab1[i,]$closepct,Censor_type=-1)
eventnum=c(eventnum,i)
eventimes=rbind.data.frame(eventimes,temp)}
}
if(length(eventnum)==0) #if no events in 60 pts then give 60 days and censor type =0
{temp=data.frame(Date=tab1[i,]$Date,Close=tab1[i,]$Close,Close_percent=tab1[i,]$closepct,Censor_type=0)
eventimes=rbind.data.frame(eventimes,temp)
daysto1st=60
cens1st=0}else{
daysto1st=eventnum[1]-1
cens1st=eventimes[1,]$Censor_type
}
colnames(eventimes)=c("Date","Close","Close_percent","Censor_type")
return(list(events=eventimes,day=daysto1st,cens=cens1st))}
}
printevents=function(data,initialpts){
ID=initialpts$row
nrow=dim(data)[1]
numevent=NULL
for (j in 1:length(ID)){
test=tail(data,n=nrow-ID[j]+1)
res=scanevent(test)$cens1st
numevent=rbind(numevent,res)
}
print(table(numevent))
}
create_testset=function(data,initialpts,txtdir,imgdir){
backward=2*30
nrow=dim(data)[1]
if(!is.null(initialpts$row)){
ID=initialpts$row
r=NULL
for (j in 1:length(ID)){
test=tail(data,n=nrow-ID[j]+1)
res=scanevent(test)
tempres=data.frame(days=res$day,censortype=res$cens)
write.table(tempres,paste(txtdir,"/imgs",j,".txt",sep = ""),sep = "\t",row.names = F,quote = F)
if(ID[j]-backward>=1){
imgtab=data[(ID[j]-backward+1):ID[j],]
imgtab[,2:5]=imgtab[,2:5]/imgtab[backward,]$Close
imgtab[,2:5]=log10(imgtab[,2:5]) #pct=price/init Close
r1=range(imgtab[,2:5])
r=c(r,r1[1],r1[2]) #log10(pct) to stablize y
write.table(imgtab,paste(imgdir,"/imgs",j,".txt",sep = ""),sep = "\t",row.names = F,quote = F)
}
}}
#print(paste0("range of logpct:",min(r),"-",max(r)))
}
spComp <- read.table("stocks/SP500.txt",header = T,sep = "\t")
dateStart_vec <- c("2016-01-01","2015-01-01")
dateEnd1_vec <- c("2016-11-01","2015-11-01")
dateEnd_vec <- c("2017-04-01","2016-04-01")
years_vec <-c("years/2016/","years/2015/")
symbols <- spComp[, 1]
nAss <- length(symbols)
spComp <- read.table("SP500.txt",header = T,sep = "\t")
dateStart_vec <- c("2016-01-01","2015-01-01")
dateEnd1_vec <- c("2016-11-01","2015-11-01")
dateEnd_vec <- c("2017-04-01","2016-04-01")
years_vec <-c("years/2016/","years/2015/")
symbols <- spComp[, 1]
nAss <- length(symbols)
nAss=10
for (j in 1:length(dateStart_vec)){
dateStart=dateStart_vec[j]
dateEnd=dateEnd_vec[j]
dateEnd1=dateEnd1_vec[j]
cmd=paste("mkdir -p ",years_vec[j],sep = "")
t1 <- try(system(cmd, intern = TRUE))
## download data on first stock as zoo object
#402 th missing data for 2016-2017
for (i in c(1:nAss)) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider=c("yahoo","oanda"),quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
cmd=paste("mkdir -p ",years_vec[j],"testset/ytab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
cmd=paste("mkdir -p ",years_vec[j],"testset/imgtab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
cmd=paste("mkdir -p ",years_vec[j],"trainset/ytab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
cmd=paste("mkdir -p ",years_vec[j],"trainset/imgtab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
if(class(result) == "try-error") {
next
}
else {
tab=data.frame(z)
tab$Date=rownames(tab)
tab=tab[,c(5,1:4)]
tab_sorted <- tab[order(tab$Date),]
tab_sorted$Date= strptime(tab_sorted$Date,format="%Y-%m-%d")
whichend1=max(which(tab_sorted$Date<=dateEnd1))
if(length(whichend1)==1 && whichend1>=60){
train_tab=tab_sorted[1:whichend1,]
test_tab=tab_sorted[(whichend1+1-60):(dim(tab)[1]),]
train_init=scaninitial0(train_tab) #scan for # of start times
test_init=scaninitial0(test_tab) #scan for # of start times
if(!is.null(train_init$table)){
dir1=paste(years_vec[j],"trainset/ytab",i,sep = "")
dir2=paste(years_vec[j],"trainset/imgtab",i,sep = "")
create_testset(train_tab,train_init,dir1,dir2)# create testset folder with imgs matching events
print(paste(i,"th stock",sep = " "))
}
if(!is.null(test_init$table)){
dir1=paste(years_vec[j],"testset/ytab",i,sep = "")
dir2=paste(years_vec[j],"testset/imgtab",i,sep = "")
create_testset(test_tab,test_init,dir1,dir2)# create testset folder with imgs matching events
print(paste(i,"th stock test",sep = " "))
}}
}
}
}
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(z <- get.hist.quote(instrument = symbols[i], start = dateStart,
end = dateEnd, provider=c("yahoo","oanda"),quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
# consider time points as unit instead of date;
scaninitial0=function(tab1){
n=dim(tab1)[1]
init0times=NULL
temp=NULL
rowID=NULL
slide=5 #5 pts constant increasing
backward=2*30 # look back 60 pts
forward=2*30
for(i in (slide+forward-1):(n-backward)){
if(all(diff(tab1[(i-slide+1):i,]$Close) >= 0)){
temp=tab1[i,]
init0times=rbind.data.frame(init0times,temp)
rowID=rbind(rowID,i)
}
}
#   for(i in (slide+forward-1):n){
#     if(all(diff(tab1[(i-slide+1):i,]$Close) >= 0)){
#       temp=tab1[i,]
#       init0times=rbind.data.frame(init0times,temp)
#       rowID=rbind(rowID,i)
#     }
#  }
return(list(row=rowID,table=init0times))
}
scanevent=function(tab1){
backward=2*30 # look back 60 pts
int0=tab1[1,]$Close
tab1$closepct=tab1$Close/int0
n=dim(tab1)[1]
eventimes=NULL
temp=NULL
eventnum=NULL
#define event within 60 pts
for(i in 1:backward){
if(tab1[i,]$closepct>=1.1)
{temp=data.frame(Date=tab1[i,]$Date,Close=tab1[i,]$Close,Close_percent=tab1[i,]$closepct,Censor_type=1)
eventnum=c(eventnum,i)
eventimes=rbind.data.frame(eventimes,temp)}}
if(length(eventnum)==0) #if no events in 60 pts then give 60 days and censor type =0
{temp=data.frame(Date=tab1[i,]$Date,Close=tab1[i,]$Close,Close_percent=tab1[i,]$closepct,Censor_type=0)
eventimes=rbind.data.frame(eventimes,temp)
daysto1st=60
cens1st=0}else{
daysto1st=eventnum[1]-1
cens1st=1
}
colnames(eventimes)=c("Date","Close","Close_percent","Censor_type")
return(list(events=eventimes,day=daysto1st,cens=cens1st))
}
printevents=function(data,initialpts){
ID=initialpts$row
nrow=dim(data)[1]
numevent=NULL
for (j in 1:length(ID)){
test=tail(data,n=nrow-ID[j]+1)
res=scanevent(test)$events
numevent=rbind(numevent,dim(res)[1])
}
print(table(numevent))
}
create_testset=function(data,initialpts,txtdir,imgdir){
backward=2*30
nrow=dim(data)[1]
ID=initialpts$row
r=NULL
for (j in 1:length(ID)){
test=tail(data,n=nrow-ID[j]+1)
res=scanevent(test)
tempres=data.frame(days=res$day,censortype=res$cens)
write.table(tempres,paste(txtdir,"/imgs",j,".txt",sep = ""),sep = "\t",row.names = F,quote = F)
imgtab=data[(ID[j]-backward+1):ID[j],]
imgtab[,2:5]=imgtab[,2:5]/imgtab[backward,]$Close
imgtab[,2:5]=log10(imgtab[,2:5]) #pct=price/init Close
r1=range(imgtab[,2:5])
r=c(r,r1[1],r1[2]) #log10(pct) to stablize y
write.table(imgtab,paste(imgdir,"/imgs",j,".txt",sep = ""),sep = "\t",row.names = F,quote = F)
}
print(paste0("range of logpct:",min(r),"-",max(r)))
}
library(lubridate)
library(zoo)
library(tseries)
spComp <- read.table("SP500.txt",header = T,sep = "\t")
dateStart <- "2007-04-01"
dateEnd1 <- "2016-11-01"
dateEnd <- "2017-04-01"
symbols <- as.character(spComp[, 1])
nAss <- length(symbols)
nAss = 10
for (i in 1:nAss) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(z <- get.hist.quote(instrument = as.character(symbols[i]), start = dateStart,
end = dateEnd, provider="yahoo",quote = c("Open", "High", "Low", "Close"),
compression="d", retclass = "zoo", quiet = T))
cmd=paste("mkdir -p testset_time/testset/ytab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
cmd=paste("mkdir -p testset_time/testset/imgtab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
cmd=paste("mkdir -p testset_time/trainset/ytab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
cmd=paste("mkdir -p testset_time/trainset/imgtab",i,sep = "")
t1 <- try(system(cmd, intern = TRUE))
if(class(result) == "try-error") {
next
}
else {
tab=data.frame(z)
tab$Date=rownames(tab)
tab=tab[,c(5,1:4)]
tab_sorted <- tab[order(tab$Date),]
tab_sorted$Date= strptime(tab_sorted$Date,format="%Y-%m-%d")
whichend1=which(tab_sorted$Date==dateEnd1)
train_tab=tab_sorted[1:whichend1,]
test_tab=tab_sorted[(whichend1+1-60):(dim(tab)[1]),]
train_init=scaninitial0(train_tab) #scan for # of start times
test_init=scaninitial0(test_tab) #scan for # of start times
if(!is.null(train_init$table)){
dir1=paste("testset_time/trainset/ytab",i,sep = "")
dir2=paste("testset_time/trainset/imgtab",i,sep = "")
create_testset(train_tab,train_init,dir1,dir2)# create testset folder with imgs matching events
print(paste(i,"th stock",sep = " "))
}
if(!is.null(test_init$table)){
dir1=paste("testset_time/testset/ytab",i,sep = "")
dir2=paste("testset_time/testset/imgtab",i,sep = "")
create_testset(test_tab,test_init,dir1,dir2)# create testset folder with imgs matching events
print(paste(i,"th stock test",sep = " "))
}
}
}
