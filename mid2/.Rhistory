source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
source("code.R")
mnist <- dataset_mnist()
source("code.R")
source("code.R")
source("code.R")
?ImageDataGenerator
ImageDataGenerator
?fit_generator
datagen=image_data_generator(
rotation_range=15
)
datagen=image_data_generator(
rotation_range=15,
featurewise_center=False,
samplewise_center=False,
featurewise_std_normalization=False
)
datagen=image_data_generator(
rotation_range=15,
featurewise_center=F,
samplewise_center=F,
featurewise_std_normalization=F
)
datagen=image_data_generator(
rotation_range=15,
featurewise_center=F,
samplewise_center=F,
featurewise_std_normalization=F,
samplewise_std_normalization=F,
width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
horizontal_flip=T,  # randomly flip images
vertical_flip=F,
)
datagen.fit(x_train)
datagen >%> fit(x_train)
datagen >%> fit_image_data_generator(x_train)
datagen %>% fit_image_data_generator(x_train)
model %>% fit_generator(
flow_images_from_data(x_train, y_train, datagen, batch_size = batch_size),
steps_per_epoch = as.integer(50000/batch_size),
epochs = epochs,
validation_data = list(x_test, y_test)
)
scores <- model %>% evaluate(
x_test, y_test, verbose = 0
)
cat('Test loss:', scores[[1]], '\n')
cat('Test accuracy:', scores[[2]], '\n')
source("code.R")
model <- keras_model_sequential() %>%
layer_conv_2d(filters = 32, kernel_size = c(3,3), activation = 'relu',
input_shape = input_shape) %>%
layer_conv_2d(filters = 64, kernel_size = c(3,3), activation = 'relu') %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.25) %>%
layer_flatten() %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = num_classes, activation = 'softmax')
datagen=image_data_generator(
rotation_range=15,
featurewise_center=F,
samplewise_center=F,
featurewise_std_normalization=F,
samplewise_std_normalization=F,
width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
horizontal_flip=T,  # randomly flip images
vertical_flip=F
)
datagen %>% fit_image_data_generator(x_train)
model %>% fit_generator(
flow_images_from_data(x_train, y_train, datagen, batch_size = batch_size),
steps_per_epoch = as.integer(50000/batch_size),
epochs = epochs,
validation_data = list(x_test, y_test)
)
epochs
batch_size
datagen %>% fit_image_data_generator(x_train)
model %>% fit_generator(
flow_images_from_data(x_train, y_train, datagen, batch_size = batch_size),
steps_per_epoch = as.integer(50000/batch_size),
epochs = epochs,
validation_data = list(x_test, y_test)
)
source("code.R")
model %>% compile(
loss = loss_categorical_crossentropy,
optimizer = optimizer_adadelta(),
metrics = c('accuracy')
)
datagen=image_data_generator(
rotation_range=15,
featurewise_center=F,
samplewise_center=F,
featurewise_std_normalization=F,
samplewise_std_normalization=F,
width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
horizontal_flip=T,  # randomly flip images
vertical_flip=F
)
datagen %>% fit_image_data_generator(x_train)
model %>% fit_generator(
flow_images_from_data(x_train, y_train, datagen, batch_size = batch_size),
steps_per_epoch = as.integer(50000/batch_size),
epochs = epochs,
validation_data = list(x_test, y_test)
)
source("code.R")
?image_data_generator
datagen = image_data_generator(rotation_range=8, width_shift_range=0.08, shear_range=0.3,
height_shift_range=0.08, zoom_range=0.08)
datagen %>% fit_image_data_generator(x_train)
model %>% fit_generator(
flow_images_from_data(x_train, y_train, datagen, batch_size = batch_size),
steps_per_epoch = as.integer(50000/batch_size),
epochs = epochs,
validation_data = list(x_test, y_test)
)
scores <- model %>% evaluate(
x_test, y_test, verbose = 0
)
cat('Test loss:', scores[[1]], '\n')
cat('Test accuracy:', scores[[2]], '\n')
80+50*(99.33-99.25)
80+50*(99.55-99.25)
model %>% fit_generator(
flow_images_from_data(x_train, y_train, datagen, batch_size = batch_size),
steps_per_epoch = as.integer(50000/batch_size),
epochs = 5,
validation_data = list(x_test, y_test)
)
scores <- model %>% evaluate(
x_test, y_test, verbose = 0
)
cat('Test loss:', scores[[1]], '\n')
cat('Test accuracy:', scores[[2]], '\n')
99.41-99.25
datagen = image_data_generator(rotation_range=8, width_shift_range=0.08, shear_range=0.3,
height_shift_range=0.08, zoom_range=0.08)
datagen %>% fit_image_data_generator(x_train)
model %>% fit_generator(
flow_images_from_data(x_train, y_train, datagen, batch_size = batch_size),
steps_per_epoch = as.integer(50000/64),
epochs = 5,
validation_data = list(x_test, y_test),
validation_steps=10000//64
)
model %>% fit_generator(
flow_images_from_data(x_train, y_train, datagen, batch_size = batch_size),
steps_per_epoch = as.integer(50000/64),
epochs = 5,
validation_data = list(x_test, y_test),
validation_steps=10000/64
)
47-25
scores <- model %>% evaluate(
x_test, y_test, verbose = 0
)
cat('Test loss:', scores[[1]], '\n')
cat('Test accuracy:', scores[[2]], '\n')
source("code.R")
datagen = image_data_generator(rotation_range=8, width_shift_range=0.08, shear_range=0.3,
height_shift_range=0.08, zoom_range=0.08)
datagen %>% fit_image_data_generator(x_train)
model %>% fit_generator(
flow_images_from_data(x_train, y_train, datagen, batch_size = batch_size),
steps_per_epoch = as.integer(50000/64),
epochs = 5,
validation_data = list(x_test, y_test),
validation_steps=10000/64
)
scores <- model %>% evaluate(
x_test, y_test, verbose = 0
)
cat('Test loss:', scores[[1]], '\n')
cat('Test accuracy:', scores[[2]], '\n')
datagen = image_data_generator(rotation_range=8, width_shift_range=0.08, shear_range=0.3,
height_shift_range=0.08, zoom_range=0.08)
datagen %>% fit_image_data_generator(x_train)
model %>% fit_generator(
flow_images_from_data(x_train, y_train, datagen, batch_size = batch_size),
steps_per_epoch = as.integer(50000/64),
epochs = 5,
validation_data = list(x_test, y_test),
validation_steps=10000/64
)
scores <- model %>% evaluate(
x_test, y_test, verbose = 0
)
cat('Test loss:', scores[[1]], '\n')
cat('Test accuracy:', scores[[2]], '\n')
model %>% fit_generator(
flow_images_from_data(x_train, y_train, datagen, batch_size = batch_size),
steps_per_epoch = as.integer(60000/64),
epochs = 5,
validation_data = list(x_test, y_test),
validation_steps=10000/64
)
scores <- model %>% evaluate(
x_test, y_test, verbose = 0
)
cat('Test loss:', scores[[1]], '\n')
cat('Test accuracy:', scores[[2]], '\n')
